1. Four Access Modifiers in Java:

Private: Accessible only within the class it is defined.
Default (package-private): Accessible only within the same package.
Protected: Accessible within the same package and by subclasses.
Public: Accessible from any other class.
Difference between Exception and Error:

2. Exception: Represents conditions that a reasonable application might want to catch, such as IOException or SQLException. Exceptions are recoverable.
Error: Represents serious problems that a reasonable application should not try to catch, such as OutOfMemoryError. Errors are generally not recoverable.
Difference between Checked and Unchecked Exception:

3. Checked Exception: These are exceptions that are checked at compile time. For example, IOException. The programmer is forced to handle these exceptions.
Unchecked Exception: These are exceptions that are checked at runtime. For example, ArrayIndexOutOfBoundsException. These exceptions are not required to be handled explicitly.

4. Java Program for Division with Exception Handling:

import java.util.Scanner;

public class Division {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter first number: ");
        int num1 = scanner.nextInt();
        System.out.println("Enter second number: ");
        int num2 = scanner.nextInt();
        
        try {
            int result = num1 / num2;
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero is not allowed.");
        }
        
        scanner.close();
    }
}

5. Code for ArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException:
// ArrayIndexOutOfBoundsException Example
public class ArrayIndexExample {
    public static void main(String[] args) {
        try {
            int[] array = new int[5];
            array[10] = 50; // This will throw ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Array index out of bounds.");
        }
    }
}

// StringIndexOutOfBoundsException Example
public class StringIndexExample {
    public static void main(String[] args) {
        try {
            String str = "Hello";
            char c = str.charAt(10); // This will throw StringIndexOutOfBoundsException
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println("Error: String index out of bounds.");
        }
    }
}

6. Exception Handling in a Login System:
public class LoginSystem {
    public static void main(String[] args) {
        String correctPassword = "password123";
        String userPassword = "wrongPassword";

        try {
            if (!userPassword.equals(correctPassword)) {
                throw new Exception("Incorrect password.");
            }
            System.out.println("Login successful!");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

7. Custom Exception for Invalid Age:
class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}

public class AgeValidation {
    public static void main(String[] args) {
        int userAge = 16;

        try {
            if (userAge < 18) {
                throw new InvalidAgeException("Age must be 18 or above.");
            }
            System.out.println("Age is valid.");
        } catch (InvalidAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

8. Exception Handling for File Not Found:
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FileRead {
    public static void main(String[] args) {
        try {
            File file = new File("data.txt");
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error: File not found.");
        }
    }
}
